// S1414j.jj JavaCC input file for S1414j compiler
options
{
  STATIC = false;         // generate non-static methods

  // set to true to debug token manager
  COMMON_TOKEN_ACTION = false;

  // pass parser reference to the token manager
  TOKEN_MANAGER_USES_PARSER = true;
}                                // end of options block
//======================================================
PARSER_BEGIN(S1414j)
import java.io.*;
import java.util.ArrayList;
class S1414j
{
  private PrintWriter outFile;
  private S1414jSymTab st;
  private S1414jCodeGen cg;
  //-----------------------------------------
  public static void main(String[] args) throws
                                             IOException
  {
    System.out.println("S1414j compiler written by ...");
	System.out.println("Jackson Maddox");
    System.out.println("Liangyu Tan");
    System.out.println("Johirul Islam");

    if (args.length != 1)
    {
      System.err.println("Wrong number cmd line args");
      System.exit(1);
    }

    // build input and output file names
    String inFileName = args[0] + ".s";
    String outFileName = args[0] + ".a";

    // construct file objects
    FileInputStream inFile =
                       new FileInputStream(inFileName);
    PrintWriter outFile = new PrintWriter(outFileName);

    // identify compiler/author in output file
    outFile.println("; from S1414j compiler written by ...");
	outFile.println("; Jackson Maddox");
	outFile.println("; Liangyu Tan");
	outFile.println("; Johirul Islam");

    // construct objects that make up compiler
    S1414jSymTab st = new S1414jSymTab();
    S1414jCodeGen cg = new S1414jCodeGen(outFile, st);
    S1414j parser = new S1414j(inFile);

    // initialize parser's instance variables
    parser.outFile = outFile;
    parser.st = st;
    parser.cg = cg;

    try
    {
      parser.program();
    }
    catch(ParseException e)
    {
      System.err.println(e.getMessage());
      outFile.println(e.getMessage());
      outFile.close();
      System.exit(1);
    }

    outFile.close();
  }
  //-----------------------------------------
  // If COMMON_TOKEN_ACTION is true, the token manager
  // calls makeComment for each token to create the
  // token trace.
  //
  public void makeComment(Token t)
  {
    outFile.printf(
      "; kd=%3d bL=%3d bC=%3d eL=%3d eC=%3d im= %s%n",
       t.kind, t.beginLine, t.beginColumn, t.endLine,
       t.endColumn, t.image);
  }

  public void makeComment(String s)
  {
    outFile.println("; " + s);
  }

  public void makeComment(Token t1, Token t2)
  {
    outFile.print(";");
	while(t1 != t2){
		outFile.print(t1.image + " ");
		t1 = t1.next;
	}
	outFile.println();
  }
}                                          // end of S1414j
//======================================================
class S1414jSymTab
{
  private ArrayList<String> symbol;
  //-----------------------------------------
  public S1414jSymTab()
  {
    symbol = new ArrayList<String>();
  }
  //-----------------------------------------
  public void enter(String s)
  {
    int index = symbol.indexOf(s);

    // if s is not in symbol, then add it
    if (index < 0)
      symbol.add(s);
  }
  //-----------------------------------------
  public String getSymbol(int i)
  {
    return symbol.get(i);
  }
  //-----------------------------------------
  public int getSize()
  {
    return symbol.size();
  }
}                                    // end of S1414jSymTab
//======================================================
class S1414jCodeGen
{
  private PrintWriter outFile;
  private S1414jSymTab st;
  private int labelNumber = 0;
  private ArrayList<String> holder;
  //-----------------------------------------
  public S1414jCodeGen(PrintWriter outFile, S1414jSymTab st)
  {
    this.outFile = outFile;
    this.st = st;
    this.holder = new ArrayList<String>();
  }
  //-----------------------------------------
  public void emitInstruction(String op)
  {
    outFile.printf("          %-4s%n", op);
  }
  //-----------------------------------------
  public void emitInstruction(String op, String opnd)
  {
    outFile.printf(
                  "          %-4s      %s%n", op, opnd);
  }
  //-----------------------------------------
  public void holdEmitInstruction(String op)
  {
    holder.add(
      String.format("          %-4s%n", op)
    );
  }
  //-----------------------------------------
  public void holdEmitInstruction(String op, String opnd)
  {
    holder.add(
      String.format(
                    "          %-4s      %s%n", op, opnd)
    );
  }
  //-----------------------------------------
  public void emitHeld()
  {
    for (String s : holder) {
      outFile.print(s);
    }
    holder.clear();
  }
  //-----------------------------------------
  public void emitdw(String label, String value)
  {
    outFile.printf(
             "%-9s dw        %s%n", label + ":", value);
  }
  //-----------------------------------------
  public void endCode()
  {
    outFile.println();
    emitInstruction("halt");

    int size = st.getSize();
    // emit dw for each symbol in the symbol table
    for (int i=0; i < size; i++)
      emitdw(st.getSymbol(i), "0");
  }
  //-----------------------------------------
  public String getLabel(){
	  return "@L" + labelNumber++;
  }
}                             // end of S1414jCodeGen class
PARSER_END(S1414j)

// Specification of the S1414j token manager ==============

TOKEN_MGR_DECLS:
{
  // called for each token returned to parser
  void CommonTokenAction(Token t)
  {
    parser.makeComment(t);
  }
}
//------------------------------
SKIP:  // these tokens are not returned to parser
{
   " "
 |
   "\n"
 |
   "\r"
 |
   "\t"
 |
   <"//" (~["\n","\r"])*>
}
//------------------------------
TOKEN:  // these tokens are returned to parser
{
   <READINT: "readint">
 |
   <PRINT: "print">
 |
   <PRINTLN: "println">  // must precede <ID>
 |
   <UNSIGNED: (["0"-"9"])+>
 |
   <ID: ["A"-"Z","a"-"z"] (["A"-"Z","a"-"z","0"-"9"])*>
 |
   <STRING: "\"" (~["\n", "\r"])* "\"">
 |
   <ASSIGN: "=">
 |
   <SEMICOLON: ";">
 |
   <LEFTPAREN: "(">
 |
   <RIGHTPAREN: ")">
 |
   <INCREMENT: "++">
 |
   <DECREMENT: "--">
 |
   <PLUS: "+">
 |
   <MINUS: "-">
 |
   <TIMES: "*">
 |
   <FORWARDSLASH: "/">
 |
   <LEFTBRACE: "{">
 |
   <RIGHTBRACE: "}">
 |
   <ERROR: ~[]>  // matches any single character
}

// Translation grammar for S1414

void program(): {}
{
   statementList()
   {cg.endCode();}
   <EOF>
}
//------------------------------
void statementList(): {}
{
   statement()
   statementList()
 |
   {}
}
//------------------------------
void statement(): {Token t; boolean outComment;}
{
  {t = getToken(1); outComment = true;}
 (
   LOOKAHEAD(2)
   assignmentStatement()
 |
   printlnStatement()
 |
   printStatement()
 |
   nullStatement()
 |
   opStatement(false)
   {cg.emitHeld();}
   ";"
 |
   compoundStatement()
   {outComment = false;}
  |
   readintStatement()
 )
 {if (outComment) makeComment(t, getToken(1));}
}
//------------------------------
void opStatement(boolean pushResult): {Token t; boolean isUp;}
{
 (
   <INCREMENT> t=<ID> {isUp = true;}
 |
   <DECREMENT> t=<ID> {isUp = false;}
 )
   {st.enter(t.image);}
   {cg.emitInstruction("pc", t.image);}
   {cg.emitInstruction("p", t.image);}
   {cg.emitInstruction("pc", "1");}
   {cg.emitInstruction(isUp ? "add" : "sub");}
   {cg.emitInstruction("stav");}
   { if (pushResult) cg.emitInstruction("p", t.image); }

 |

 (
   LOOKAHEAD(2)
   t=<ID> <INCREMENT> {isUp = true;}
 |
   t=<ID> <DECREMENT> {isUp = false;}
 )
   {st.enter(t.image);}
   { if (pushResult) cg.emitInstruction("p", t.image); }

   {cg.holdEmitInstruction("pc", t.image);}
   {cg.holdEmitInstruction("p", t.image);}
   {cg.holdEmitInstruction("pc", "1");}
   {cg.holdEmitInstruction(isUp ? "add" : "sub");}
   {cg.holdEmitInstruction("stav");}

}
//------------------------------
void assignmentStatement(): {Token t;}
{
   t=<ID>
   {st.enter(t.image);}
   {cg.emitInstruction("pc", t.image);}
   "="
   assignmentTail()
   {cg.emitInstruction("stav");}
   {cg.emitHeld();}
}
//------------------------------
void assignmentTail() : {Token t;}
{
	LOOKAHEAD(2)
	t = <ID>
	{st.enter(t.image);}
	{cg.emitInstruction("pc", t.image);}
	"="
	assignmentTail()
	{cg.emitInstruction("dupe");}
	{cg.emitInstruction("rot");}
	{cg.emitInstruction("stav");}
   |
   LOOKAHEAD(2)
   opStatement(true)
   ";"
   |
	expr()
	";"
}
//------------------------------
void printlnStatement(): {}
{
   "println"
   "("
   ( printArg() | {})
   {cg.emitInstruction("pc", "'\\n'");}
   {cg.emitInstruction("aout");}
   ")"
   ";"
}
//------------------------------
void printStatement(): {}
{
   "print"
   "("
   printArg()
   ")"
   ";"
}
//------------------------------
void printArg(): {Token t; String label;}
{
   t = <STRING>
   {label = cg.getLabel();}
   {cg.emitInstruction("pc", label);}
   {cg.emitInstruction("sout");}
   {cg.emitdw("^" + label, t.image);}
  |
   LOOKAHEAD(2)
   opStatement(true)
   {cg.emitInstruction("dout");}
   {cg.emitHeld();}
  |
   expr()
   {cg.emitInstruction("dout");}
}
//------------------------------
void nullStatement(): {}
{
   ";"
}
//------------------------------
void compoundStatement(): {}
{
   "{"
   {makeComment("{");}
   statementList()
   "}"
   {makeComment("}");}
}
//------------------------------
void expr(): {}
{
   term()
   termList()
}
//------------------------------
void termList(): {}
{
   "+"
   term()
   {cg.emitInstruction("add");}
   termList()
|
   "-"
   term()
   {cg.emitInstruction("sub");}
   termList()
|
   {}
}
//------------------------------
void term(): {}
{
   factor()
   factorList()
}
//------------------------------
void factorList(): {}
{
   "*"
   factor()
   {cg.emitInstruction("mult");}
   factorList()
 |
   "/"
   factor()
   {cg.emitInstruction("div");}
   factorList()
 |
   {}
}
//------------------------------
void factor(): {Token t;}
{
   t=<UNSIGNED>
   {cg.emitInstruction("pwc", t.image);}
 |
   "+"
   factor()
 |
   "-"
   negfactor()
 |
   t=<ID>
   {st.enter(t.image);}
   {cg.emitInstruction("p", t.image);}
 |
   "("
   expr()
   ")"
}

void negfactor() : {Token t;}
{
	t=<UNSIGNED>
   {cg.emitInstruction("pwc", "-" + t.image);}
  |
    t = <ID>
	{st.enter(t.image);}
	{cg.emitInstruction("p", t.image);}
	{cg.emitInstruction("neg");}
   |
	"("
	expr()
	")"
	{cg.emitInstruction("neg");}
   |
    (LOOKAHEAD(1) "+")+
	{t = getToken(1);}
	(
 	 LOOKAHEAD(1)
	  "-"
	  factor()
	  |
	  factor()
	  {cg.emitInstruction("neg");}
	)
   |
	"-"
	factor()
}
//------------------------------
void readintStatement(): {Token t;}
{
    "readint"
	"("
	t = <ID>
	{cg.emitInstruction("pc", t.image);}
	{cg.emitInstruction("din");}
	{cg.emitInstruction("stav");}
	")"
	";"

}

