; from S4 compiler written by ...
; Jackson Maddox
; Liangyu Tan
; Johirul Islam
;    x = +3 + -2 + 1;
          pc        x
          pwc       3
          pwc       -2
          add 
          pwc       1
          add 
;    y = x;
          stav
          pc        y
          p         x
;    z = x*(2 + y) + (((4099)));
          stav
          pc        z
          p         x
          pwc       2
          p         y
          add 
          mult
          pwc       4099
          add 
;    println(z + x + -2);
          stav
          p         z
          p         x
          add 
          pwc       -2
          add 
          dout
          pc        '\n'
          aout
;    println(4107);
          pwc       4107
          dout
          pc        '\n'
          aout
;    println("S1 test done");
          pc        @L0
          sout
^@L0:     dw        "S1 test done"
          pc        '\n'
          aout
; //==========================================================
; // Add support for subtraction, division, null statement, 
; // compound statement, print statement, and single-line
; // comments.
;    println((z - (x - 50)   // comment in middle of statement
          p         z
          p         x
          pwc       50
          sub 
;         ) / 2 - x);
          sub 
          pwc       2
          div 
          p         x
          sub 
          dout
          pc        '\n'
          aout
;    println(2075);
          pwc       2075
          dout
          pc        '\n'
          aout
;    ;                       // null statement 
;    {{;                     // compound statement
;       {
;       x = 10;  
          pc        x
          pwc       10
;       ;
          stav
;       y = 20;
          pc        y
          pwc       20
;    }};}
          stav
;    {}
;    print(x);
          p         x
          dout
;    println(x);
          p         x
          dout
          pc        '\n'
          aout
;    println(1010);
          pwc       1010
          dout
          pc        '\n'
          aout
;    println(y);
          p         y
          dout
          pc        '\n'
          aout
;    println(20);
          pwc       20
          dout
          pc        '\n'
          aout
;    x = 1 + (2 + (3+ 4));
          pc        x
          pwc       1
          pwc       2
          pwc       3
          pwc       4
          add 
          add 
          add 
;    println(x);
          stav
          p         x
          dout
          pc        '\n'
          aout
;    println(10);
          pwc       10
          dout
          pc        '\n'
          aout
;    x = 1 + 2 + 3 + 4 + 5;
          pc        x
          pwc       1
          pwc       2
          add 
          pwc       3
          add 
          pwc       4
          add 
          pwc       5
          add 
;    println(x);
          stav
          p         x
          dout
          pc        '\n'
          aout
;    println(15);
          pwc       15
          dout
          pc        '\n'
          aout
;    println("S2 test done");
          pc        @L1
          sout
^@L1:     dw        "S2 test done"
          pc        '\n'
          aout
; //==========================================================
; // Add support, println with zero arguments, println and 
; // print with string argument,  cascaded assignment 
; // statement, unary plus and minus, and readint statement.
;    println("four lines follow");
          pc        @L2
          sout
^@L2:     dw        "four lines follow"
          pc        '\n'
          aout
;    print("one line");
          pc        @L3
          sout
^@L3:     dw        "one line"
;    println();
          pc        '\n'
          aout
;    println("one line");
          pc        @L4
          sout
^@L4:     dw        "one line"
          pc        '\n'
          aout
;    println("third line\nfourth line");
          pc        @L5
          sout
^@L5:     dw        "third line\nfourth line"
          pc        '\n'
          aout
;    x = y = z = + - - - - - + -7;
          pc        x
          pc        y
          pc        z
          pwc       7
;    print(x);
          dupe
          rot 
          stav
          dupe
          rot 
          stav
          stav
          p         x
          dout
;    print(" = ");
          pc        @L6
          sout
^@L6:     dw        " = "
;    print(y);
          p         y
          dout
;    print(" = ");
          pc        @L7
          sout
^@L7:     dw        " = "
;    print(z);
          p         z
          dout
;    print(" = ");
          pc        @L8
          sout
^@L8:     dw        " = "
;    println(7);
          pwc       7
          dout
          pc        '\n'
          aout
;    z = -(+x - + + - + + - + + + + - + + - + + -y);
          pc        z
          p         x
          p         y
          neg 
          sub 
          neg 
;    print ("-14 = ");
          stav
          pc        @L9
          sout
^@L9:     dw        "-14 = "
;    print(z);
          p         z
          dout
;    print(" = ");
          pc        @L10
          sout
^@L10:    dw        " = "
;    println(-(-(+(-(14))))); 
          pwc       14
          neg 
          neg 
          neg 
          dout
          pc        '\n'
          aout
;    // no comment in following statement because // inside string
;    println("////Enter integer////");   
          pc        @L11
          sout
^@L11:    dw        "////Enter integer////"
          pc        '\n'
          aout
;    readint(q);
          pc        q
          din 
          stav
;    print("= ");
          pc        @L12
          sout
^@L12:    dw        "= "
;    println(q + + + + 1 - 1); 
          p         q
          pwc       1
          add 
          pwc       1
          sub 
          dout
          pc        '\n'
          aout
;    println("S3 test done"); 
          pc        @L13
          sout
^@L13:    dw        "S3 test done"
          pc        '\n'
          aout
; //==========================================================
; // Add support for while, do-while, if, if-else, and escape 
; // sequences within a string.
;    x = 1;
          pc        x
          pwc       1
;    println("2 1 on separate lines");
          stav
          pc        @L14
          sout
^@L14:    dw        "2 1 on separate lines"
          pc        '\n'
          aout
;    while(x)               // nested while loops
@L15:
          p         x
;    {
          jz        @L16
;       y = 2;
          pc        y
          pwc       2
;       while (y)
          stav
@L17:
          p         y
;       {
          jz        @L18
;          println(y);
          p         y
          dout
          pc        '\n'
          aout
;          y = y -  1;      
          pc        y
          p         y
          pwc       1
          sub 
;       }
          stav
;       x = x - 1;
          ja        @L17
@L18:
          pc        x
          p         x
          pwc       1
          sub 
;    }
          stav
;    zero = 0;
          ja        @L15
@L16:
          pc        zero
          pwc       0
;    while (zero)
          stav
@L19:
          p         zero
;       println("bug");
          jz        @L20
          pc        @L21
          sout
^@L21:    dw        "bug"
          pc        '\n'
          aout
;    x = 0 - 3;
          ja        @L19
@L20:
          pc        x
          pwc       0
          pwc       3
          sub 
;    print("hello -3 up to hello -1\n");
          stav
          pc        @L22
          sout
^@L22:    dw        "hello -3 up to hello -1\n"
;    while (x)              // if inside while
@L23:
          p         x
;    {
          jz        @L24
;       if (x) print("hello ");
          p         x
          jz        @L25
          pc        @L26
          sout
^@L26:    dw        "hello "
;       else println("bug1");
          ja        @L27
@L25:
          pc        @L28
          sout
^@L28:    dw        "bug1"
          pc        '\n'
          aout
;       println(x);
@L27:
          p         x
          dout
          pc        '\n'
          aout
;       x = x + 1;
          pc        x
          p         x
          pwc       1
          add 
;    }
          stav
;    x = 2;
          ja        @L23
@L24:
          pc        x
          pwc       2
;    print("bye 2 down to bye 1\n");
          stav
          pc        @L29
          sout
^@L29:    dw        "bye 2 down to bye 1\n"
;    do                     // do-while loop
;    {
@L30:
;       print("bye ");
          pc        @L31
          sout
^@L31:    dw        "bye "
;       println(x);
          p         x
          dout
          pc        '\n'
          aout
;       x = x - 1;
          pc        x
          p         x
          pwc       1
          sub 
;    } while (x);
          stav
          p         x
;    x = 1;
          jnz       @L30
          pc        x
          pwc       1
;    println("Next line should \
          stav
; say \"hello\" with the quotes");
          pc        @L32
          sout
^@L32:    dw        "Next line should say \"hello\" with the quotes"
          pc        '\n'
          aout
;    if (x)                 // nested if
          p         x
;    if (x)
          jz        @L33
          p         x
;    if (x) 
          jz        @L34
          p         x
;    {
          jz        @L35
;       print("\"hel");
          pc        @L36
          sout
^@L36:    dw        "\"hel"
;       println("lo\"");
          pc        @L37
          sout
^@L37:    dw        "lo\""
          pc        '\n'
          aout
;    }
;    else 
;    {
          ja        @L38
@L35:
;       println("bug3");
          pc        @L39
          sout
^@L39:    dw        "bug3"
          pc        '\n'
          aout
;    }
;    print("good = ");
@L38:
@L34:
@L33:
          pc        @L40
          sout
^@L40:    dw        "good = "
;    if (zero)             // execute else part 
          p         zero
;    {
          jz        @L41
;       println("bug4");
          pc        @L42
          sout
^@L42:    dw        "bug4"
          pc        '\n'
          aout
;    }
;    else 
;       println("good");
          ja        @L43
@L41:
          pc        @L44
          sout
^@L44:    dw        "good"
          pc        '\n'
          aout
;    println("Next line should say \"bye\" without the quotes\nbye");
@L43:
          pc        @L45
          sout
^@L45:    dw        "Next line should say \"bye\" without the quotes\nbye"
          pc        '\n'
          aout
;    println("\"3 backslashes and a double quote \\\\\\\" within a string\"");
          pc        @L46
          sout
^@L46:    dw        "\"3 backslashes and a double quote \\\\\\\" within a string\""
          pc        '\n'
          aout
;    println("S4 test done");
          pc        @L47
          sout
^@L47:    dw        "S4 test done"
          pc        '\n'
          aout

          halt
x:        dw        0
y:        dw        0
z:        dw        0
q:        dw        0
zero:     dw        0
