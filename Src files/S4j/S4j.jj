// S4j.jj JavaCC input file for S4j compiler
options 
{
  STATIC = false;         // generate non-static methods

  // set to true to debug token manager
  COMMON_TOKEN_ACTION = false;   

  // pass parser reference to the token manager
  TOKEN_MANAGER_USES_PARSER = true; 
}                                // end of options block
//======================================================
PARSER_BEGIN(S4j)
import java.io.*;
import java.util.ArrayList;
class S4j
{
  private PrintWriter outFile;   
  private S4jSymTab st;
  private S4jCodeGen cg;
  //-----------------------------------------
  public static void main(String[] args) throws 
                                             IOException
  {
    System.out.println("S4j compiler written by ...");
	System.out.println("Jackson Maddox");
    System.out.println("Liangyu Tan");
    System.out.println("Johirul Islam");

    if (args.length != 1)
    {
      System.err.println("Wrong number cmd line args");  
      System.exit(1);
    }

    // build input and output file names
    String inFileName = args[0] + ".s";
    String outFileName = args[0] + ".a";

    // construct file objects
    FileInputStream inFile = 
                       new FileInputStream(inFileName);
    PrintWriter outFile = new PrintWriter(outFileName);

    // identify compiler/author in output file
    outFile.println("; from S4j compiler written by ...");
	outFile.println("; Jackson Maddox");
	outFile.println("; Liangyu Tan");
	outFile.println("; Johirul Islam");

    // construct objects that make up compiler
    S4jSymTab st = new S4jSymTab();
    S4jCodeGen cg = new S4jCodeGen(outFile, st);
    S4j parser = new S4j(inFile);

    // initialize parser's instance variables
    parser.outFile = outFile;
    parser.st = st;   
    parser.cg = cg;

    try 
    {
      parser.program();
    }
    catch(ParseException e) 
    {
      System.err.println(e.getMessage());
      outFile.println(e.getMessage());
      outFile.close();
      System.exit(1);
    }

    outFile.close();
  }
  
  private RuntimeException genEx(String errorMessage)
  {
	Token currentToken = getToken(1);
    return new RuntimeException("Encountered \"" +
      currentToken.image + "\" on line " +
      currentToken.beginLine + ", column " +
      currentToken.beginColumn + "." +
      System.getProperty("line.separator") +
      errorMessage);
  }
  //-----------------------------------------
  // If COMMON_TOKEN_ACTION is true, the token manager 
  // calls makeComment for each token to create the
  // token trace.
  //
  public void makeComment(Token t)
  {
    outFile.printf(
      "; kd=%3d bL=%3d bC=%3d eL=%3d eC=%3d im= %s%n",
       t.kind, t.beginLine, t.beginColumn, t.endLine, 
       t.endColumn, t.image);
  }
  
  public void makeComment(String s)
  {
    outFile.println("; " + s);
  }
  
  public void makeComment(Token t1, Token t2)
  {
    outFile.print(";");
	while(t1 != t2){
		outFile.print(t1.image + " ");
		t1 = t1.next;
	}
	outFile.println();
  }
}                                          // end of S4j
//======================================================
class S4jSymTab
{
  private ArrayList<String> symbol;
  //-----------------------------------------
  public S4jSymTab()
  {
    symbol = new ArrayList<String>();
  }
  //-----------------------------------------
  public void enter(String s)
  {
    int index = symbol.indexOf(s);

    // if s is not in symbol, then add it
    if (index < 0)
      symbol.add(s);
  }
  //-----------------------------------------
  public String getSymbol(int i)
  {
    return symbol.get(i);
  }
  //-----------------------------------------
  public int getSize()
  {
    return symbol.size();
  }
}                                    // end of S4jSymTab
//======================================================
class S4jCodeGen
{
  private PrintWriter outFile;
  private S4jSymTab st;
  private int labelNumber = 0;
  //-----------------------------------------
  public S4jCodeGen(PrintWriter outFile, S4jSymTab st)
  {
    this.outFile = outFile;
    this.st = st;
  }
  //-----------------------------------------
  public void emitInstruction(String op)
  {
    outFile.printf("          %-4s%n", op); 
  }
  //-----------------------------------------
  public void emitInstruction(String op, String opnd)
  {
    outFile.printf(
                  "          %-4s      %s%n", op, opnd); 
  }
  //-----------------------------------------
  public void emitdw(String label, String value)
  {
    outFile.printf(
             "%-9s dw        %s%n", label + ":", value);
  }
  //-----------------------------------------
  public void emitLabel(String label)
  {
    outFile.printf("%s%n", label + ":");
  }
  //-----------------------------------------
  public void endCode()
  {
    outFile.println();
    emitInstruction("halt");

    int size = st.getSize();
    // emit dw for each symbol in the symbol table
    for (int i=0; i < size; i++) 
      emitdw(st.getSymbol(i), "0");
  }
  //-----------------------------------------
  public String getLabel(){
	  return "@L" + labelNumber++;
  }
   //-----------------------------------------
  public void emitString(String line)
  {
    outFile.printf("%s%n", line);
  }
}                             // end of S4jCodeGen class
PARSER_END(S4j)

// Specification of the S4j token manager ==============

TOKEN_MGR_DECLS:
{
  // called for each token returned to parser
  void CommonTokenAction(Token t)
  {
    parser.makeComment(t);
  }
}
//------------------------------
SKIP:  // these tokens are not returned to parser
{
   " " 
 | 
   "\n" 
 | 
   "\r" 
 | 
   "\t"
 |
   <"//" (~["\n","\r"])*>
}
//------------------------------
MORE:
{
	"\"": IN_STRING
}
//------------------------------
TOKEN:  // these tokens are returned to parser
{
   <DO: "do">
 |
   <IF: "if">
 |
   <ELSE: "else">
 |
   <WHILE: "while">
 |
   <READINT: "readint">
 |
   <PRINT: "print">
 |
   <PRINTLN: "println">  // must precede <ID> 
 |
   <UNSIGNED: (["0"-"9"])+> 
 |
   <ID: ["A"-"Z","a"-"z"] (["A"-"Z","a"-"z","0"-"9"])*>

 |
   <ASSIGN: "=">
 |
   <SEMICOLON: ";">
 |
   <LEFTPAREN: "(">
 |
   <RIGHTPAREN: ")">
 |
   <PLUS: "+">
 |
   <MINUS: "-">
 |
   <TIMES: "*">
 |
   <FORWARDSLASH: "/">
 |
   <LEFTBRACE: "{">
 |  
   <RIGHTBRACE: "}">

}
//------------------------------
<IN_STRING>
MORE:
{
	 "\\\""
	|
	 "\\\\"
	|
	 <~["\"", "\n", "\r"]>
	|
	 "\\\r\n"
	|
	 "\\\n"
	|
	 "\\\r"
	|
	 <~["\"", "\n","\r"]>
}
//------------------------------
<IN_STRING>
TOKEN:
{
	 <STRING: "\"">
	 {
		matchedToken.image = matchedToken.image.replace("\\\r\n", "");
		matchedToken.image = matchedToken.image.replace("\\\r", "");
		matchedToken.image = matchedToken.image.replace("\\\n", "");
		//matchedToken.image = image.toString;
	 }: DEFAULT
	 
}
//------------------------------
<*>
TOKEN:
{
	<ERROR: ~[]>
}

// Translation grammar for S4

void program(): {}
{  
   statementList() 
   {cg.endCode();}
   <EOF>
}
//------------------------------
void statementList(): {} 
{
   statement() 
   statementList()  
 |  
   {}
}    
//------------------------------
void statement(): {Token t; boolean outComment;} 
{
  {t = getToken(1); outComment = true;}
 try{
 (
   assignmentStatement()
 |
   printlnStatement()
 |
   printStatement()
 |
   nullStatement()
 |
   compoundStatement()
   {outComment = false;}
 | 
   readintStatement()
 | 
   whileStatement()
 | 
   doWhileStatement()
 |
   ifStatement()
 )
 {if (outComment) makeComment(t, getToken(1));}
 }
 catch(ParseException e){
	System.err.println(e.getMessage());
	cg.emitString(e.getMessage());
 
	while(getToken(1).kind != SEMICOLON && getToken(1).kind != EOF)
		getNextToken();
	if(getToken(1).kind != EOF)
		getNextToken();
 }
}

//------------------------------
void whileStatement(): {String label1, label2;}
{
   "while"
   {label1 = cg.getLabel();}
   {cg.emitLabel(label1);}
   "("
   expr()
   ")"
   {label2 = cg.getLabel();}
   {cg.emitInstruction("jz", label2);}
   statement()
   {cg.emitInstruction("ja", label1);}
   {cg.emitLabel(label2);}
}

//------------------------------
void doWhileStatement():{String label1;}
{
	"do"
	{label1 = cg.getLabel();}
    {cg.emitLabel(label1);}

    statement()

	"while"
    "("
    expr()
    ")"
    ";"

    {cg.emitInstruction("jnz", label1);}
}

//------------------------------
void ifStatement():{String label1;}
{
	"if"
    "("
    expr()
    ")"

    {label1 = cg.getLabel();}
    {cg.emitInstruction("jz", label1);}

    statement()
    elsePart(label1)
}

//------------------------------
void elsePart(String label1):{String label2;}
{
      "else"
      {label2 = cg.getLabel();}
      {cg.emitInstruction("ja", label2);}
      {cg.emitLabel(label1);}
      statement()
      {cg.emitLabel(label2);}
	 |
      {cg.emitLabel(label1);}
}
  
//------------------------------
void assignmentStatement(): {Token t;}
{
   t=<ID>  
   {st.enter(t.image);} 
   {cg.emitInstruction("pc", t.image);}
   "="
   assignmentTail()
   {cg.emitInstruction("stav");}
   
}
//------------------------------
void assignmentTail() : {Token t;}
{
	LOOKAHEAD(2)
	t = <ID>
	{st.enter(t.image);}
	{cg.emitInstruction("pc", t.image);}
	"="
	assignmentTail()
	{cg.emitInstruction("dupe");}
	{cg.emitInstruction("rot");}
	{cg.emitInstruction("stav");}
   |
	expr()
	";"
}
//------------------------------
void printlnStatement(): {}
{
   "println"
   "("
   ( printArg() | {})
   {cg.emitInstruction("pc", "'\\n'");}
   {cg.emitInstruction("aout");}
   ")"
   ";"
}
//------------------------------
void printStatement(): {}
{
   "print"
   "("
   printArg()
   ")"
   ";"
}
//------------------------------
void printArg(): {Token t; String label;}
{
   t = <STRING>
   {label = cg.getLabel();}
   {cg.emitInstruction("pc", label);}
   {cg.emitInstruction("sout");}
   {cg.emitdw("^" + label, t.image);}
  |
   expr()
   {cg.emitInstruction("dout");}
}


//------------------------------
void nullStatement(): {}
{
   ";"
}
//------------------------------
void compoundStatement(): {}
{
   "{"
   {makeComment("{");}
   statementList()
   "}"
   {makeComment("}");}
}
//------------------------------
void expr(): {}
{
   term()
   termList()
}
//------------------------------
void termList(): {}
{
   "+"
   term()
   {cg.emitInstruction("add");}
   termList()
|  
   "-"
   term()
   {cg.emitInstruction("sub");}
   termList()
|  
   {}
}
//------------------------------
void term(): {}
{
   factor()
   factorList()
}
//------------------------------
void factorList(): {}
{
   "*"  
   factor()
   {cg.emitInstruction("mult");}
   factorList()
 |  
   "/"  
   factor()
   {cg.emitInstruction("div");}
   factorList()
 |
   {}
}
//------------------------------
void factor(): {Token t;} 
{
   t=<UNSIGNED> 
   {if (t.image.length() > 5 || Integer.parseInt(t.image) > 32767) {
      throw genEx("Expecting integer (-32768 to 32767)");}}
   {cg.emitInstruction("pwc", t.image);}
 |
   "+"
   factor()
 |
   "-"
   negfactor()
 |
   t=<ID> 
   {st.enter(t.image);}
   {cg.emitInstruction("p", t.image);}
 |  
   "(" 
   expr() 
   ")"
}

void negfactor() : {Token t;}
{
	t=<UNSIGNED> 
   {cg.emitInstruction("pwc", "-" + t.image);}
  |
    t = <ID>
	{st.enter(t.image);}
	{cg.emitInstruction("p", t.image);}
	{cg.emitInstruction("neg");}
   |
	"("
	expr()
	")"
	{cg.emitInstruction("neg");}
   |
    (LOOKAHEAD(1)
    "+")+
	{t = getToken(1);}
	(
 	 LOOKAHEAD(1)
	  "-"
	  factor()
	  |
	  factor()
	  {cg.emitInstruction("neg");}
	)
   |
	"-"
	factor()
}
//------------------------------
void readintStatement(): {Token t;}
{
    "readint"
	"("
	t = <ID>
	{cg.emitInstruction("pc", t.image);}
	{cg.emitInstruction("din");}
	{cg.emitInstruction("stav");}
	")"
	";"
	
}

